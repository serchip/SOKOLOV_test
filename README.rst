=======================================
Тестовое задание от проекта SOKOLOV
=======================================
Реализацию на aiohttp

  Задача
-------------
Представьте, что вы пишете backend для почтового сервера. Ваш код не реализует SMTP/POP3/IMAP (за это отвечают другие компоненты),
но предоставляет сервисы хранения (например, в postgres) в виде REST API (можно использовать любой фреймворк, например pyramid,
 django или что-то асинхронное). Для простоты уберем регистрацию пользователей, сосредоточимся только на хранении самих писем.

У каждого пользователя есть почтовый ящик с 2-мя каталогами (inbox и sent).
API позволяет пользователю отправить письмо нескольким адресатам.
И тогда письмо сохраняется в каталог sent отправителя и в каталог inbox каждого из получателей.
 Также API должно позволять пользователям просмотреть содержимое своих каталогов (список писем),
  получить содержание письма, снять/поставить отметку о прочтении или вообще удалить письмо.
Письмом будем считать объект с заголовком, текстовым содержанием, полем from и набором адресатов (to).


 Установка
-------------
Поднимаем окружение ``docker-compose build && docker-compose up``
Генерация фэйковых данных ``docker-compose run web python db_helpers.py -a``

Документация
---------------
``http://127.0.0.1:8080/api/doc``

 Использование
----------------
http://127.0.0.1:8080/

Удаление базы данных ``docker-compose run web python db_helpers.py -d``
Пересоздание базы данных ``docker-compose run web python db_helpers.py -r``

Для выполнения задачи были реализованны следующие методы:
* '/api/message/create' - создание сообщения(й)
* '/api/message/create'- просмотр списка сообщений
* '/api/message/view/{id:\d+}' - просмотр сообщения
* '/api/message/read/{id:\d+}' - снять/поставить отметку о прочтении
* '/api/message/delete/{id:\d+}' - удаление сообщения

 Тесты
-------------
``docker-compose run web pytest tests/test_api.py``

TODO
_____________
Надо бы реализовать нормальный механизм validate и serialization
Вот хороший пример https://github.com/Relrin/aiorest-ws
На реализацию необходимо время, в рамках тестового задания его не так много :)